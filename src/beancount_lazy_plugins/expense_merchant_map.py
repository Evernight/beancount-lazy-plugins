"""
A Beancount plugin that maps expense accounts to include merchant names.

This plugin goes through all expense transactions and extends the account names
to include a normalized merchant name derived from the transaction narration.
For example: Expenses:Groceries -> Expenses:Groceries:MerchantName

The merchant name is generated by normalizing the transaction narration,
removing whitespace and non-alphanumeric characters.
"""

import re
import collections
from beancount.core.data import Transaction, Posting

__plugins__ = ["expense_merchant_map"]

ExpenseMerchantMapError = collections.namedtuple(
    "ExpenseMerchantMapError", "source message entry"
)


def generate_merchant_name(narration):
    """Generate a normalized merchant name from transaction narration.
    
    Args:
        narration: The transaction narration string.
        
    Returns:
        A normalized merchant name with only alphanumeric characters.
    """
    if not narration:
        return "Unknown"
    
    # Remove common prefixes and suffixes that don't add value
    cleaned = narration.strip()
    
    # Remove common transaction prefixes/suffixes
    prefixes_to_remove = [
        "Purchase at ", "Payment to ", "Transaction at ", "Buy from ",
        "Purchase from ", "Payment for ", "Expense at "
    ]
    
    for prefix in prefixes_to_remove:
        if cleaned.startswith(prefix):
            cleaned = cleaned[len(prefix):]
            break
    
    # Remove dates, amounts, and other transaction metadata
    # Remove patterns like "on 2024-01-01", "for $123.45", etc.
    cleaned = re.sub(r'\bon\s+\d{4}-\d{2}-\d{2}\b', '', cleaned, flags=re.IGNORECASE)
    cleaned = re.sub(r'\bfor\s+\$?\d+\.?\d*\b', '', cleaned, flags=re.IGNORECASE)
    cleaned = re.sub(r'\$\d+\.?\d*', '', cleaned)
    
    # Keep only alphanumeric characters and spaces
    # cleaned = re.sub(r'[^a-zA-Z0-9\s]', '', cleaned)
    # Actually even remove the digits
    cleaned = re.sub(r'[^a-zA-Z\s]', '', cleaned)
    
    # Remove extra whitespace and convert to title case
    cleaned = ' '.join(cleaned.split())
    
    if not cleaned:
        return "Unknown"
    
    # Convert to CamelCase for account naming
    words = cleaned.split()
    merchant_name = ''.join(word.capitalize() for word in words)
    
    # Limit length to avoid overly long account names
    if len(merchant_name) > 25:
        merchant_name = merchant_name[:25]
    
    return merchant_name if merchant_name else "Unknown"


def expense_merchant_map(entries, options_map, config_str=None):
    """Map expense accounts to include merchant names.
    
    Args:
        entries: A list of directives.
        options_map: A parser options dict.
        config_str: Optional configuration string (unused).
        
    Returns:
        A list of entries with modified expense account names, and a list of errors.
    """
    errors = []
    new_entries = []
    
    for entry in entries:
        if isinstance(entry, Transaction):
            # Check if this transaction has any expense postings
            has_expense_postings = any(
                posting.account.startswith('Expenses:') 
                for posting in entry.postings
            )
            
            if has_expense_postings:
                # Generate merchant name from narration
                merchant_name = generate_merchant_name(entry.payee if entry.payee else entry.narration)
                
                # Create new postings with modified expense accounts
                new_postings = []
                for posting in entry.postings:
                    if posting.account.startswith('Expenses:'):
                        # Split the account to preserve the first category
                        account_parts = posting.account.split(':')
                        if len(account_parts) >= 2:
                            # Insert merchant name after the first category
                            # e.g., "Expenses:Shopping" -> "Expenses:Shopping:MerchantName"
                            new_account = f"{account_parts[0]}:{account_parts[1]}:{merchant_name}"
                            if len(account_parts) > 2:
                                # If there are more subcategories, append them after merchant
                                remaining_parts = ':'.join(account_parts[2:])
                                new_account = f"{new_account}:{remaining_parts}"
                        else:
                            # Just "Expenses" without subcategory, add merchant directly
                            # Does it ever happen?
                            new_account = f"{posting.account}:{merchant_name}"
                        
                        new_posting = posting._replace(account=new_account)
                        new_postings.append(new_posting)
                    else:
                        # Keep non-expense postings unchanged
                        new_postings.append(posting)
                
                # Create new transaction with modified postings
                new_transaction = entry._replace(postings=new_postings)
                new_entries.append(new_transaction)
            else:
                # Transaction has no expense postings, keep unchanged
                new_entries.append(entry)
        else:
            # Not a transaction, keep unchanged
            new_entries.append(entry)
    
    return new_entries, errors
